## ESTRUCTURA DE COMPUTADORES   (ETSInformatica)
##  
##
## LAB 13. Synchronization by interrupts
##
## Initial handler code


##############################################################
##              HANDLER DATA SEGMENT                        ##
##############################################################

			.kdata
var1:	.word 0xFFFFFFFF
context: .space 16 # the area to put the context

#############################################################
##                  HANDLER CODE                           ##
#############################################################

          .ktext 0x80000080

    ## Save the user program context

    .set noat
    sw  $at, 0($k1)
    .set at
    sw $t0, 4($k1)
    sw $v0, 8($k1)
    sw $a0, 12($k1)

 ## Identify and handle interrupts
    ## (nothing for the moment)
    
    mfc0 $k0, $13
    andi $t0, $k0, 0x003C
    bne $t0, $zero, retexc
    
    andi $t0, $k0, 0x400
    bne $t0, $zero, int0
    
    andi $t0, $k0, 0x1000
    bne $t0, $zero, int2
int0:
    ## Identify and handle interrupts
    la $t0 ,0xFFFF0000
    lw  $a0 , 4($t0)            # <--- Cancel
    

    li $v0, 11
    li $a0, '*'
    syscall

    j retexc

int2:
    la $t0 ,0xFFFF0010
    sw  $0 , 0($t0)            # <--- Cancel
    j retexc
    ## Restore context
retexc:
    .set noat
    lw  $at, 0($k1)
    .set at
    lw $t0, 4($k1)
    lw $v0, 8($k1)
    lw $a0, 12($k1)

    ## Set user mode and return to the user program
    
    # $k0 has the return address
    mfc0 $k0, $14
	rfe
	jr $k0 

#############################################################
##                    Starting code                        ##
#############################################################

          .text
          .globl __start 
__start: 
    ## Starting code 
      
    # enable interrupts keyboard
    li $t0, 0xFFFF0000    
    li $t1,2
    sb $t1, 0($t0)
    # enable interrupts clock
    li $t0, 0xFFFF0010    
    li $t1,1
    sb $t1, 0($t0)

    # Context base address
    la $k1, context

    # the line Int0* goes to unmasked
    li $t0, 0x0503
    mtc0 $t0, $12

    ## Jump to user program
	jal main

    ## Ending code
	li $v0, 10
	syscall	 # exit function

