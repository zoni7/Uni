
###
###   ESTRUCTURA DE COMPUTADORES (ETSInformatica)
###
### LAB 14: SYSTEM CALLS (I) 
###
### MiMoS v.0
###

##############################################################
##              HANDLER DATA AREA                           ##
##############################################################

		.kdata

		## Main process context

savereg:	.word 0,0,0	# To store $at, $t1 y $t0
addrret:	.word 0		# To store returning address

		## Main process states

		READY          	= 0	
		WAITING 	= 1
			


state:		.word READY		# To store process state 
					# Initially will be ready

		## Clock variables
seconds:	.word 0
awake:		.word 0


		## Keyboard variables


		## Console variables


#############################################################
##           HANDLER CODE                                  ##
#############################################################

          .ktext 0x80000080

## To do in cuesti√≥n 1 (2nd part)
## $eti: j $eti  # <- Usually this line is a comment


## Save context

	.set noat
	sw $at,0($k1)	      	 	# Saving $at
	.set at
	sw $t0,4($k1)			# Saving $t0, it will be used for addresses
	sw $t1,8($k1)			# Saving $t1, it will be used for data

## Exception cause analysis

	mfc0 $k0,$13			# Coping cause register
	andi $t0,$k0, 0x003c		# Isolating cause code
	beq $t0,$zero,interrupt  	# Is it a hardware interrupt?  
	li $t1, 0x20			# Is it a system call? 
	beq $t1, $t0, call 

	b retexc			# Any other cause is ignored   

#############################################################
##             INTERRUPT HANDLING                          ##
#############################################################

interrupt:      

## Preparing return address (only if it is the main process)

	lw $t0,state
	li $t1,READY
	bne $t0,$t1,$L1
	mfc0 $t0, $14			# EPC
	sw $t0, addrret

## Analysing pendant interrupts

$L1:	andi $t0, $k0, 0x1000		# int2 pendant?
	bne  $t0, $zero, int2
	andi $t0, $k0, 0x800		# int1 pendant?
	bne  $t0, $zero, int1
	andi $t0, $k0, 0x400		# int0 pendant?
	bne  $t0, $zero, int0
	b retexc			# Not handled interrupt

#-------------------------------------------------------------

## CLOCK interrupt handling

int2:
	# To do
	la $t0, seconds
	lw $t1, 0($t0)
	addi $t1, $t1, 1
	sw $t1, 0($t0)
	
	la $t0, 0xffff0010
	li $t1, 0x1
	sb $t1, 0($t0)
	
	la $t0, state
	lw $t1, 0($t0)
	
	li $t0, WAITING
	
	bne $t1, $t0, fin
	
	la $t0, seconds
	lw $t1, 0($t0)
	
	la $t0, awake
	lw $t0, 0($t0)
	
	bne $t1, $t0, fin
	
	la $t0, state
	li $t1, READY
	sw $t1, 0($t0)
	
fin:
	b retexc			# end

## KEYBOARD interrupt handling

int0:
	# To do
	b retexc			# end

## CONSOLE interrupt handling

int1:
	# To do
	b retexc			# end


#############################################################
##                    SYSTEM CALLS                         ##
#############################################################

call:

## Preparing return address

	mfc0 $k0, $14		# EPC
	addi $k0,$k0,4
	sw $k0, addrret

## Selecciono la llamada

	li $t1,11			# print_char?
	beq $t1,$v0,print_char
        li $t1,12			# read_char?
	beq $t1,$v0,read_char
	li $t1,90			# get_version?
	beq $t1,$v0,get_version
	li $t1,91			# get_time?
	beq $t1,$v0,get_time
	li $t1,92			# wait_time?
	beq $t1,$v0,wait_time
	b retexc			# System call not implemented

#---------------------------------------------------------------

###### PRINT_CHAR (system call 11)

print_char:
	li $t0, 0xffff0008
$L0:	lb $t1, 0($t0)   		# reading console state register
	andi $t1, $t1, 1
	beq $t1,$zero,$L0
	sb $a0, 4($t0) 
	b retexc

###### READ_CHAR (system call 12)

read_char:
        # To do
        b retexc

###### GET_VERSION (system call 90)

get_version:
	li $v0,2
	b retexc


###### GET_TIME (system call 91)

get_time:
	# To do
	la $t0, seconds
	lw $v0, 0($t0)
	b retexc

###### WAIT_TIME (system call 92)

wait_time:
	# To do
	la $t0, state
	li $t1, WAITING
	sw $t1, 0($t0)
	
	la $t0, seconds
	lw $t1, 0($t0)
	add $t1, $t1, $a0

	la $t0, awake
	sw $t1, 0($t0)
	
	
	b retexc


#############################################################
##             CONTEXT SWITCH AND HANDLER EXEC END         ##
#############################################################

retexc:

## CONTEXT SWITCH

	lw $t0,state
	li $t1,READY
	beq $t0,$t1,$L2		# If (state == READY), go back to main process

	la $k0,void_process
	b $L3			# otherwise, go back to void process
         
$L2:	lw $k0,addrret		# addrret contains the returning address to the 
				# main process

## Restoring the context

$L3:	lw $t1, 8($k1)		# Restoring $t1
	lw $t0, 4($k1)		# Restoring $t0
	.set noat
	lw $at, 0($k1)		# Restoring $at
	.set at
	rfe			# Restoring bits KU/IE
	jr $k0

##############################################################



###################################################################
##                       STARTING CODE                           ##
###################################################################

          .text
          .globl __start 
__start: 

## Seting peripheral interfaces

	li $t0, 0xffff0000
	sb $zero, 0($t0)	# Disable KEYBOARD hardware interrupt

	li $t0, 0xffff0008
	sb $zero, 0($t0)	# Disable CONSOLE hardware interrupt

	li $t0, 0xffff0010
	li $t1, 0x1
	sb $t1, 0($t0)	# Disable CLOCK hardware interrupt

## Setting coprocessor state register and user mode

	mfc0 $t0, $12
	ori $t0, $t0, 0x0403	# Interrupt globaly enabled
	mtc0 $t0, $12

## Jump to user program

	la $k1, savereg	        # $k1 contains starting context address
	jal main

## Shutdown

	li $v0, 10
	syscall			# syscall 10 (exit)


###################################################################
##                  SYSTEM VOID PROCESS                          ##
###################################################################

void_process: # System void process
	b void_process
