#BlueJ class context
comment0.params=esDigrafo
comment0.target=Grafo(boolean)
comment0.text=\ Crea\ un\ grafo\ vacio,\ Dirigido\ si\ esDigrafo\ es\ true\n\ \ o\ No\ Dirigido\ en\ caso\ contrario.\n\ \ @param\ esDigrafo\ Indica\ el\ tipo\ del\ grafo,\ Dirigido\ o\ No\n
comment1.params=
comment1.target=boolean\ esDirigido()
comment1.text=\ Comprueba\ si\ un\ grafo\ es\ o\ no\ Dirigido.\n\ \ @return\ boolean\ true\ si\ el\ grafo\ es\ Dirgido\ y\ false\ si\ es\ No\ Dirigido\n
comment2.params=
comment2.target=int\ numVertices()
comment2.text=\ Devuelve\ el\ numero\ de\ vertices\ de\ un\ grafo.\n\ \ @return\ int\ numero\ de\ vertices\ de\ un\ grafo\n
comment3.params=
comment3.target=int\ numAristas()
comment3.text=\ Devuelve\ el\ numero\ de\ aristas\ de\ un\ grafo.\n\ \ @return\ int\ numero\ de\ aristas\ de\ un\ grafo\n
comment4.params=i\ j
comment4.target=boolean\ existeArista(int,\ int)
comment4.text=\ Comprueba\ si\ la\ arista\ (i,\ j)\ esta\ en\ un\ grafo.\n\ \ @param\ i\ \ \ \ Vertice\ origen\n\ \ @param\ j\ \ \ \ Vertice\ destino\n\ \ @return\ boolean\ true\ si\ (i,\ j)\ esta\ y\ false\ en\ caso\ contrario\n
comment5.params=i\ j
comment5.target=double\ pesoArista(int,\ int)
comment5.text=\ Devuelve\ el\ peso\ de\ la\ arista\ (i,\ j)\ de\ un\ grafo,\ 0\ si\ dicha\ arista\ \n\ \ no\ esta\ en\ el\ grafo.\n\ \ @return\ double\ Peso\ de\ la\ arista\ (i,\ j),\ 0\ si\ no\ existe.\n
comment6.params=i\ j
comment6.target=void\ insertarArista(int,\ int)
comment6.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ en\ un\ grafo\ no\ Ponderado.\n\ \ @param\ i\ \ \ \ Vertice\ origen\n\ \ @param\ j\ \ \ \ Vertice\ destino\n
comment7.params=i\ j\ p
comment7.target=void\ insertarArista(int,\ int,\ double)
comment7.text=\ Si\ no\ esta,\ inserta\ la\ arista\ (i,\ j)\ de\ peso\ p\ en\ un\ grafo\ Ponderado.\n\ \ @param\ i\ \ \ \ Vertice\ origen\n\ \ @param\ j\ \ \ \ Vertice\ destino\n\ \ @param\ p\ \ \ \ Peso\ de\ la\ arista\ (i,\ j)\n
comment8.params=i
comment8.target=librerias.estructurasDeDatos.modelos.ListaConPI\ adyacentesDe(int)
comment8.text=\ Devuelve\ una\ Lista\ Con\ PI\ que\ contiene\ los\ adyacentes\ al\ vertice\ i\ de\ \n\ \ un\ grafo.\n\ \ @param\ i\ Vertice\ del\ que\ se\ obtienen\ los\ adyacentes\n\ \ @return\ ListaConPI\ con\ los\ vertices\ adyacentes\ a\ i\n
comment9.params=
comment9.target=java.lang.String\ toString()
comment9.text=\ Devuelve\ un\ String\ con\ cada\ uno\ de\ los\ vertices\ de\ un\ grafo\ y\ sus\ \n\ \ adyacentes,\ en\ orden\ de\ insercion.\ \n\ \ @return\ \ String\ que\ representa\ a\ un\ grafo\n
numComments=10
